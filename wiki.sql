-- phpMyAdmin SQL Dump
-- version 4.1.12
-- http://www.phpmyadmin.net
--
-- Host: 127.0.0.1
-- Erstellungszeit: 24. Jul 2014 um 09:56
-- Server Version: 5.6.16
-- PHP-Version: 5.5.11

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;

--
-- Datenbank: `wiki`
--

-- --------------------------------------------------------

--
-- Tabellenstruktur für Tabelle `wiki`
--

CREATE TABLE IF NOT EXISTS `wiki` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `category` varchar(20) NOT NULL,
  `title` varchar(50) NOT NULL,
  `version` int(11) NOT NULL,
  `notes` text NOT NULL,
  `author` varchar(50) NOT NULL,
  `creation_date` date NOT NULL,
  `expiration_date` date NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=latin1 AUTO_INCREMENT=84 ;

--
-- Daten für Tabelle `wiki`
--

INSERT INTO `wiki` (`id`, `category`, `title`, `version`, `notes`, `author`, `creation_date`, `expiration_date`) VALUES
(1, 'Doku', 'Einleitung', 40, 'Im Rahmen einer Projektarbeit für das Seminar Web & Mobile Development beschäftigt sich diese Dokumentation mit dem Erfassen, Verarbeiten, Analysieren und Präsentieren einer Wissensdatenbankanwendung für moderne Browser und mobile Endgeräte. \r\nDer Weg von einem theoretischen Konstrukt bis hin zu einer fertigen Web-Anwendung wird dabei umfassend notiert und soll über die Vorgehensweise, den vorgegebenen Anforderungen und der anschließenden technischen Umsetzung Auskunft geben.\r\n', 'Heiko Herder', '2014-04-09', '2015-07-01'),
(18, 'Doku', 'Ausgangssituation', 12, 'Neben dem Aufbau eines Front- und Backends stellt sich explizit die Frage nach dem konkreten Inhalt. Die Anwendung soll Themen des Seminars enthalten und somit indirekt als Grundlage für die eigene Erstellung dienen:\r\n\r\n•	HTML\r\n•	CSS\r\n•	PHP\r\n•	JavaScript (AJAX)\r\n•	mySQL\r\n•	Netzwerktechnik\r\n\r\nDie allgemein bewährte Speicherung in solchen Wissenspools wird „Wiki“ genannt. Das ist das hawaiische Wort für schnell und steht technisch gesehen für ein Webseiten-Hypertext-System , dessen Inhalte von Benutzern online gelesen und verarbeitet, bzw. editiert und gelöscht werden können.\r\nDa das Studium der Wirtschaftsinformatik nicht nur ein Seminar umfaßt, sondern auch viele weitere technische aber auch wirtschaftliche Bereiche, kann evtl. eine Ausweitung in Themen wie z.B. Supply Management, Statistik oder Management Accounting nicht ausgeschlossen werden.\r\n', 'Heiko Herder', '2014-05-30', '2015-07-01'),
(19, 'Doku', 'Zielsetzung', 16, 'Das Ziel ist es, zum einen Erfahrung und Wissen zentral und gezielt abrufen zu können, zum anderen, dies überall verfügbar zu haben, was für die Implementierung auf einem Webserver spricht.\r\nDabei soll bei der eigentlichen Web-Entwicklung nicht auf ein Content-Management-System mit eingebauter Wiki-Engine zurückgegriffen werden, sondern sukzessive und ohne Frameworkhilfe ein eigenes Gerüst für zentrale Wissensverarbeitung geschaffen werden. \r\nBei der Umsetzung der Applikation für mobile Endgeräte wird jedoch das Sencha-Framework benutzt.\r\nEin weiteres Ziel ist es, die gelernten bzw. vorgestellten Techniken und Möglichkeiten in diesem Projekt anzuwenden und zu realisieren.\r\n', 'Heiko Herder', '2014-05-30', '2015-07-11'),
(20, 'Doku', 'Vorgehensweise', 3, 'Die Basis für die Web-Anwendung bildet das in PHP-Skriptsprache geschriebene Backend, der Web-Service, welcher auch als erstes realisiert wird. In weiteren Schritten folgt dann die Umsetzung des Frontends, wobei hier HTML-, CSS- und JavaScript-Techniken (AJAX) zum Einsatz kommen. Abschließend erfolgt die Umsetzung des mobile-Clients.', 'Heiko Herder', '2014-07-07', '2015-07-07'),
(21, 'Doku', 'Organisation', 1, 'Entsprechend dieser groben Einteilung wurde das Projekt auch auf die zwei Teilnehmer verteilt. Die konkreten Aufgaben wurden folgendermaßen verteilt:\r\nRoger Ordon: Webservice, AJAX, mobile Client; eigentlicher Schwerpunkt: Backend; Dokumentation;\r\nHeiko Herder: Webservice, AJAX, HTML, CSS; eigentlicher Schwerpunkt: Frontend; Dokumentation;?\r\nEinzelne Arbeitsschritte werden permanent miteinander abgestimmt um gerade in der Endphase des Projekts aufgrund der zeitkritischen Umstände möglichst zielführend und erfolgsorientiert zu arbeiten.\r\nEinen wesentlichen Beitrag zur erfolgreichen Umsetzung spielt, neben den infrastrukturtechnischen Voraussetzungen und die Erreichbarkeit eines jeden Teilnehmers, auch eine gute Möglichkeit des Ergebnisaustausches. So wird der Hosting-Dienst GitHub für den Code-Austausch verwendet. Damit ist es den Teilnehmern möglich, in eigenen Repositories das Projekt als Sammlung von Quellcode zu nutzen.\r\n', 'Heiko Herder', '2014-07-07', '2015-07-07'),
(22, 'CSS', 'Gestaltung mittels CSS', 1, 'Die Anwendung soll in erster Linie informieren und Wissen teilen. Dazu ist ein rein funktionales Design gewählt worden, was jedoch die wesentlichen Elemente gut transportiert.\r\nDie CSS Anweisungen wurden komplett ausgelagert, um den Code übersichtlich zu halten. Neben den eigenen Gestaltungen werden einige jQuery-Stylesheets benutzt.\r\n\r\nDie Wahl der Bezeichner für die eigenen CSS-Elemente erfolgte funktionsorientiert. So wurden HTML-Elemente entweder um das Attribut Klasse oder ID erweitert. Die ID wurde gewählt, wenn die Elemente mit Javascript verarbeitet werden und ggf. im Design eher einmalig auftreten, z.B. die Tabellenelemente <td>. Über die Klassen werden sich wiederholende Designelemente bestimmt. Neben der logischen Trennung werden die Elemente durch einen unterschiedlichen Selektor (. oder #) angesprochen.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nEin erster Ansatz dieses Projektes war es, ein Responsive Design zu schaffen, um auf möglichst vielen Geräten mit wenig Aufwand die Anwendung skalierbar zu halten. Dies wurde jedoch im weiteren Verlauf verworfen, da es nach Ansicht aller Projektteilnehmer nach der letzten Veranstaltung nicht zielführend sei. Der Grund dafür ist die Implementierung des mobile Clients.\r\nDa das Projekt stetig weiterentwickelt werden soll, bleiben die sog. Media-Queries im unteren Teil der style.css jedoch erhalten.\r\n', 'Heiko Herder', '2014-07-07', '2015-07-07'),
(23, 'Use-Cases', 'Benutzerauthentifizierung', 2, 'Die Anmeldung an der Webanwendung wurde durch die Apache Basic Authentifizierung realisiert. Diese Form der Authentifizierung ist wirksam für den Zugriff auf ein Verzeichnis, in diesem Fall das Verzeichnis /wiki/service des Webservice. Hierzu wurde in der Datei /wiki/service/.htaccess die Direktive AuthType Basic eingetragen.\r\n\r\n \r\n\r\nDer Direktive AuthUserFile verweist auf die Datei /wiki/service/.htusers in der Benutzername und Passwort im Klartext gespeichert werden. Beim Erstaufruf der index.html werden nacheinander alle referenzierten Javascript-Dateien initialisiert. Das Widget wikiStatistic ist das erste, welches einen HTML Request an den Web Server sendet. Ausgelöst durch den Erstzugriffs auf das Verzeichnis /wiki/service durch den Webservice wird der Benutzer aufgefordert, Benutzername und Passwort anzugeben. Das erste Der Benutzername wird in der aktuellen Web-Session gespeichert. \r\n', 'Roger Ordon', '2014-07-07', '2015-07-17'),
(24, 'Use-Cases', 'Darstellung der Listenansicht', 3, 'Für die Ausgabe einer Liste von Einträgen wurde in der index.html ein separates <div> mit der ID wiki_list definiert (vgl. Abb, X), welches als Template zur Darstellung der einzelnen Datensätze dient. Die Division beinhaltet nur eine Tabellenzeile, die für jedes Datensatzattribut eine Zelle <td> besitzt. Standardmäßig ist die Tabelle über die Klasse template in der Datei style.css ausgeblendet.\r\n \r\nWährend des ersten Programmaufrufs wird das Widget wiki.wikiList initialisiert. Die Funktion create sendet einen HTML POST Request an den Web Server. Die Klasse RequestHandler ruft aufgrund die Funktion  readWikis() der Klasse GetWikisCommand auf. Diese ermittelt via SQL Query die ersten 8 Datensätze der Tabelle wiki in der mySQL-Datenbank wiki und speichert das Ergebnis in der Variablen $wikis. Die Datensätez werden über die Klasse  RequestHandler an den Browser und das Widget wiki.wikiList zurückgeliefert. Über die Funktion appendWikis wird pro Datensatz eine Kopie des Templates wiki_list erstellt, die Daten auf dieses übertragen. Während des Kopiervorgangs wird die Klasse template entfernt und die Division wiki_list angezeigt. Ein erneuter Aufruf der Listenübersicht erfolgt über die Funktion reload in dem Widget wiki.wikiList. Die alte Listenansicht wird ausgeblendet und der oben beschriebene Programmablauf wiederholt. \r\n', 'Roger Ordon', '2014-07-07', '2015-07-17'),
(25, 'Use-Cases', 'Begrenzung der Listenansicht', 2, 'Die Anzahl der ausgegebenen Datensätze wird grundsätzlich durch die SQL Anweisung LIMIT eingeschränkt. LIMIT besitzt 2 Paramenter. Die Zeile innerhalb der Tabelle, von der aus die Datensätze angezeigt werden sollen und die Anzahl der ausgegebenen Datensätze.\r\n\r\nSELECT * FROM wiki LIMIT 0, 10\r\n•	Diese Anweisung zeigt die ersten 10 Datensätze der Tabelle wiki.\r\n\r\nSELECT * FROM wiki LIMIT 4, 5\r\n•	Diese Anweisung zeigt die Datensätze 5, 6, 7, 8, und 9.\r\n\r\nPro Seite sollen 8 Datensätze angezeigt werden. Für die Berechnung der Seitenzahl muss zuerst die Anzahl der Datensätze ermittelt werden. Hierzu sendet das Widget wiki.pageNumber einen HTML GET Aufruf an den Web Server. Der Web Service erkennt anhand der Datei .htaccess, dass die Anfrage an die Web Service Klasse Requesthandler weitergeleitet werden muss. Der Parameter command legt fest, an welche Klasse der RequestHandler die Anfrage weiterleiten soll.\r\n \r\nDie Klasse RequestHandler ruft die Funktion  execute() der Klasse GetWikisCommand auf. Die Klasse GetWikisCommand ruft die Funktion countWikis() in der Klasse wikiService auf. Diese ermittelt via SQL Query die Anzahl der Datensätze der Tabelle wiki in der mySQL-Datenbank wiki und speichert das Ergebnis in der Variablen $pagedata[count]. Die Anzahl der Datensätze wird durch 8 geteilt. Sofern das Ergebnis eine Nachkommastelle beinhaltet (die Anzahl der Datensätze ist kleiner als 8 jedoch größer als 0) wird die Seitenzahl um 1 erhöht, um später alle Datensätze anzeigen zu können. Die so ermittelte Seitenzahl wird in dem Array pagedate[pagenum] gespeichert. Diese Werte werden über die Klasse  RequestHandler an den Browser und das Widget wiki.pageNumber zurückgeliefert.\r\n?\r\n \r\nDas Widget erstellt unterhalb der Datensatzliste einen Link pro Datensatzseite.\r\n\r\n \r\nWird einer der Links, beispielsweise der Link 2 gedrückt, liefert der Link den Wert 2 an das Widget wiki.wikiList mit dem Funktionsaufruf reload. Das Widget berechnet anhand dem Wert des Links den Startpunkt für die SQL Anweisung LIMIT neu und führt einen vollständiges Reload aller in die Darstellung der Datensatzliste eingebundenen Funktionen durch, so dass die Datensätze der Ausgewählten Seite auf dem Bildschirm ausgegeben werden.\r\n', 'Roger Ordon', '2014-07-07', '2015-07-15'),
(26, 'Use-Cases', 'Detailansicht eines Eintrags', 2, 'Für die Ausgabe der Detailansicht wurde in der index.html ein separates <div> mit der ID wiki_details definiert, welches als Template zur vollständigen Darstellung eines einzelnen Datensatzes dient. Die Division beinhaltet eine Tabelle, in der die Attribute des Datensatzes übersichtlich angeordnet sind.\r\n\r\n\r\n\r\n?\r\n \r\nJeder Datensatz in der Listenansicht wurde mit einem Trigger verlinkt, der auf ein Click Ereignis reagiert. Sobald ein Datensatz durch ein Click Ereignis aufgerufen wird, ruft das Widget wiki.application die Funktion onWikiClicked: auf. Diese Funktion verdeckt die Listenansicht, den Header sowie den Footer und ruft die Funktion open im Widget wiki.wikiDetails auf. \r\n\r\n \r\nDie Funktion load sendet einen HTML GET Request an den Web Server. Als Parameter wird die ID des Datensatzes mitgeliefert. Die Klasse RequestHandler ruft aufgrund die Funktion  execute() der Klasse GetWikiCommand auf. Die Klasse GetWikiCommand wiederum ruft die Funktion readWiki() in der Klasse wikiService auf. Diese ermittelt via SQL Query den gesuchten Datensatz in der Tabelle wiki in der mySQL-Datenbank wiki und speichert das Ergebnis in der Variablen $wiki. Der Datensatz wird über die Klasse RequestHandler an den Browser und das Widget wiki.wikiDetails zurückgeliefert. Die immer noch aktive Funktion load überträgt den Datensatz auf das Widget und zeigt dieses an.\r\n', 'Roger Ordon', '2014-07-10', '2015-07-10'),
(27, 'Use-Cases', 'Neuanlage eines Eintrags', 1, 'Für die Neuanlage eines neuen Datensatzes wurde in der index.html ein separates <div> mit der ID create_dialog definiert, welches als Template zur Erfassung eines einzelnen Datensatzes dient. Das Widget enthält nur drei Textfelder für die Eingabe der Kategorie, des Titels sowie der Artikelbeschreibung. Für den Autor des Artikels wird Benutzernamen des angemeldeten Users aus der Web Session ausgelesen.\r\n\r\n \r\nErstell- und Ablaufdatum werden automatisch durch eine Funktion in der SQL Query berechnet und erfasst. Das Ablaufdatum berechnet sich aus der Formel [aktuelles Datum] + [1 Jahr].  Für die Erfassung eines neuen Datensatzes ist das Widget wiki.createDialog zuständig. Der Aufruf erfolgt über das Menü im Kopf der Webseite.\r\n?\r\nDer Menübutton “Neues Wiki“ ist mit der Funktion onCreateWikiClicked: verknüpft, die bei einem Click Ereignis die Funktion open im Widget wiki.createDialog aufruft.\r\n \r\nDie Funktion open öffnet das Widget createDialog und wartet auf eine Bestätigung zum Speicher des neuen Datensatzes bzw. zum Abbruch des Vorgangs.\r\nDas Click Event auf dem “Speichern“ Button aktiviert die Funktion createWiki, welche die Textfelder des Widgets ausliest und über einen HTML POST Request an den Web Server sendet. Die Klasse RequestHandler ruft die Funktion  execute() der Klasse CreateWikiCommand auf. Die Klasse CreateWikiCommand wiederum ruft die Funktion createWiki() in der Klasse wikiService auf. Diese ergänzt die Felder author, creation_date und expiration_date in der SQL Query und schreibt den Datensatz in die Tabelle wiki in der mySQL-Datenbank wiki. Die Klasse  RequestHandler meldet die Anlage des Datensatzes an den Browser und das Widget wiki.createWiki. Im Anschluss werden die Listenansicht, die Anzahl der Seiten im Paginate und die Anzahl der Datensätze in der Statistikansicht aktualisiert.\r\n', 'Roger Ordon', '2014-07-10', '2015-07-10'),
(28, 'Use-Cases', 'Bearbeitung eines Eintrags', 2, 'Für die Bearbeitung eines neuen Datensatzes wurde in der index.html ein separates <div> mit der ID edit_dialog definiert, welches als Template zur Erfassung eines einzelnen Datensatzes dient. Das Widget enthält Textfelder für alle Attribute des Datensatzes. Editierbar sind jedoch nur die Attribute “Kategorie“, “Titel“ und “Beschreibung“.\r\n?\r\n \r\nFür die Erfassung eines neuen Datensatzes ist das Widget wiki.editDialog zuständig. Der Aufruf erfolgt über die Listenansicht. Das Schreibstiftsymbo ist mit der Funktion onEditWikiClicked: verknüpft, die bei einem Click Ereignis die Funktion open im Widget wiki.editDialog aufruft.\r\n \r\nDas Click Event auf das Stiftsymbol aktiviert die Funktion _updateWiki, welche die Textfelder des Widgets ausliest und über einen HTML PUT Request an den Web Server sendet. Die Klasse RequestHandler prüft, ob alle Pflichtfelder ausgefüllt wurden und ruft die Funktion  execute() der Klasse UpdateWikiCommand auf. \r\nDiese überprüft, ob die in der Web Session gespeicherte Versionsnummer des Datensatzes mit der Versionsnummer, welche durch das Widget übertragen wurde, übereinstimmt. Hierdurch wird sichergestellt, dass der Datensatz zwischenzeitlich nicht durch einen anderen User verändert wurde.?\r\n \r\nStimmen die Versionsnummern überein, wird die Funktion updateWiki() in der Klasse wikiService aufgerufen, welche via SQL Query den Datensatz in der Tabelle wiki in der mySQL-Datenbank wiki aktualisiert. Beim Speichervorgang wird das Ablaufdatum in der SQL Anweisung nach der Formel [aktuelles Datum] + [1 Jahr] neu festgelegt. Die Klasse  RequestHandler meldet die Aktualisierung des Datensatzes an den Browser und das Widget wiki.editDialog. Im Anschluss wird die Listenansicht aktualisiert.\r\n', 'Roger Ordon', '2014-07-11', '2015-07-11'),
(29, 'Use-Cases', 'Löschen eines Eintrags', 1, 'Für das Löschen eines Datensatzes wurde in der index.html das <div> mit der ID delete_dialog definiert, welches als Template zur Anzeige eines Warnhinweises  dient. Das Widget enthält einen Warnhinweis, in dem der Benutzer gefragt wird, ob er den ausgewählten Datensatz tatsächlich löschen möchte.\r\n\r\n \r\nFür die Löschung eines Datensatzes ist das Widget wiki.deleteDialog zuständig. Der Aufruf erfolgt über die Listenansicht. Das Löschsymbol, rechts neben dem Schreibstiftsymbol ist mit der Funktion onDeleteWikiClicked: verknüpft, die bei einem Click Ereignis die Funktion open im Widget wiki.deleteDialog aufruft. Der Löschdialog fordert den Benutzer zur Bestätigung bzw. zum Abbruch des Löschvorgangs auf. Der “OK“ Button ist mit dem Funktionsaufruf _deleteWiki() des Widgets wiki.deleteDialog verknüpft, welche einen HTML DELETE Request an den Web Server sendet. Die Klasse RequestHandler nimmt den Request entgegen und ruft die Funktion  execute() der Klasse DeleteWikiCommand auf. Die Klasse DeleteWikiCommand ruft die Funktion deleteWiki() in der Klasse wikiService auf. Die Funktion sendet einen SQL DELETE Request für den ausgewählten Datensatz an die Tabelle wiki in der mySQL-Datenbank wiki. Die Klasse  RequestHandler meldet die Löschung des Datensatzes an den Browser und das Widget wiki.deleteDialog. Im Anschluss wird die Listenansicht aktualisiert.\r\n', 'Roger Ordon', '2014-07-11', '2015-07-11'),
(30, 'Use-Cases', 'Berechnung der Gültigkeit eines Eintrags', 1, 'Die Artikel des Web Development Wikis besitzen ein Ablaufdatum. Die Aktualität seines Artikels soll spätestens nach einem Jahr überprüft. Das Ablaufdatum wird automatisch nach der Formel [Erstelldatum + 1 Jahr] vergeben. Hierdurch soll vermieden werden, dass Lösungsansätze eines vor längerer Zeit eingestellten Artikels in der Zwischenzeit durch technische Neuerungen überholt wurden. Die Gültigkeitsdauer eines Artikels wird in der Listenansicht angezeigt.\r\n\r\n \r\nDie Berechnung der Gültigkeitsdauer erfolgen jeweils in den Klassen GetWikiscommand bzw. SearchWikiCommand. Die Funktionen execute() vergleichen hierzu das aktuelle Datum mit dem Ablaufdatum des Datensatzes und berechnen die Differenz.\r\n\r\n \r\nWird ein Artikel zwischenzeitlich verändert bzw. aktualisiert, wird das Ablaufdatum um ein Jahr, vom Änderungsdatum ausgehend verlängert. Das neue Ablaufdatum berechnet sich nach folgender Formel: [Änderungsdatum + 1 Jahr].\r\n', 'Roger Ordon', '2014-07-11', '2015-07-11'),
(31, 'Use-Cases', 'Bestätigung einer Veränderung am Datenbestand', 2, 'Die Bestätigung einer Veränderung mussten für die Use-Cases „Bearbeiten eines Eintrags“ und „Löschen eines Eintrags“ berücksichtigt werden. Hierzu wurden in die Widgets zwei Buttons implementiert. Den OK Button, welcher bei einem Click Event eine Funktion zum Speichern bzw. Löschen des Datensatzes anstößt und ein den Abbrechen Button, welcher das Widget schließt, ohne weitere Aktionen durchzuführen.', 'Roger Ordon', '2014-07-11', '2015-07-13'),
(32, 'Ablagestruktur', 'Verzeichnisstruktur', 1, 'Folgende Verzeichnisstruktur liegt dem Projekt zugrunde:\r\n\r\nBasisverzeichnis: 	/wiki/\r\nCascadin Style Sheets:	/wiki/css/\r\nImages:			/wiki/img/\r\nWebservice:		/wiki/service/\r\nJavascript:		/wiki/js/\r\nmobile Client:		/wiki/mc/\r\n', 'Roger Ordon', '2014-07-11', '2015-07-11'),
(34, 'Ablagestruktur', 'Dateistruktur', 1, '/wiki/\r\n/wiki/index.html\r\n\r\n/wiki/css/\r\n/wiki/css/jquery-ui-1.10.4.customs.css\r\n/wiki/css/style.css\r\n\r\n/wiki/img/\r\n/wiki/img/delete10x10.png\r\n/wiki/img/edit10x10.png\r\n/wiki/img/webdev_grau.png\r\n/wiki/js/\r\n/wiki/js/jquery-1.10.2.js\r\n/wiki/js/jquery-ui-1.10.4.custom.js\r\n/wiki/js/jquery.blockUI.js\r\n/wiki/js/wiki.application.js\r\n/wiki/js/wiki.contactdialog.js\r\n/wiki/js/wiki.createdialog.js\r\n/wiki/js/wiki.deletedialog.js\r\n/wiki/js/wiki.editdialog.js\r\n/wiki/js/wiki.errordialog.js\r\n/wiki/js/wiki.menubar.js\r\n/wiki/js/wiki.pagenumber.js\r\n/wiki/js/wiki.wikidetails.js\r\n/wiki/js/wiki.wikifooter.js\r\n/wiki/js/wiki.wikiheader.js\r\n/wiki/js/wiki.wikilist.js\r\n/wiki/js/wiki.wikisearch.js\r\n/wiki/js/wiki.wikistatistic.js\r\n\r\n/wiki/mc/\r\n/wiki/mc/index.html\r\n/wiki/mc/app.js\r\n/wiki/mc/controller/Appcontroller.js\r\n/wiki/mc/model/Wiki.js\r\n/wiki/mc/store/Wikis.js\r\n/wiki/mc/view/Main.js\r\n/wiki/mc/view/WikiForm.js\r\n/wiki/mc/view/WikiList.js\r\n?\r\n/wiki/service/\r\n/wiki/service/.htaccess\r\n/wiki/service/.htusers\r\n/wiki/service/CreateWikiCommand.php\r\n/wiki/service/CreateWikiResult.php\r\n/wiki/service/DeleteWikiCommand.php\r\n/wiki/service/GetWikiCommand.php\r\n/wiki/service/GetWikisCommand.php\r\n/wiki/service/GetWikisMobCommand.php\r\n/wiki/service/RequestHandler.php\r\n/wiki/service/SearchWikisCommand.php\r\n/wiki/service/UpdateWikiCommand.php\r\n/wiki/service/wiki.php\r\n/wiki/service/wikiService.php\r\n', 'Roger Ordon', '2014-07-11', '2015-07-11'),
(35, 'Ablagestruktur', 'Funktionskurzbeschreibung', 2, 'Die im vorherigen Kapitel aufgelisteten Dateien sind hier kurz beschrieben.\r\n\r\n/wiki/\r\n/wiki/index.html\r\n•	Startseite und Konfiguration der HTML Elemente.\r\n\r\n/wiki/css/\r\n/wiki/css/jquery-ui-1.10.4.customs.css\r\n/wiki/css/style.css\r\n•	Gestaltung der HTML Elemente.\r\n\r\n/wiki/img/\r\n/wiki/img/delete10x10.png\r\n•	Image zur Symbolsierung des Löschen Buttons in der Listenansicht.?\r\n/wiki/img/edit10x10.png\r\n•	Imgage zur Symbolisierung des Bearbeiten Buttons in der Listenansicht.\r\n\r\n/wiki/img/webdev_grau.png\r\n•	Logo der Startseite.\r\n\r\n/wiki/js/\r\n/wiki/js/jquery-1.10.2.js\r\n/wiki/js/jquery-ui-1.10.4.custom.js\r\n/wiki/js/jquery.blockUI.js\r\n•	Javascript- (jQuery) Standardklassen\r\n\r\n/wiki/js/wiki.application.js\r\n•	Zentrale Widgetsteuerung. Initialisierung aller Widgets während des ersten Programmaufrufs.\r\n\r\n/wiki/js/wiki.contactdialog.js\r\n•	Widget zur Anzeige des Kontakt Dialogs.\r\n\r\n/wiki/js/wiki.createdialog.js\r\n•	Widget zur Erfassung eines neuen Datensatzes.\r\n\r\n/wiki/js/wiki.deletedialog.js\r\n•	Widget zur Anzeige eines Warnhinweises während des Löschvorgangs.\r\n\r\n/wiki/js/wiki.editdialog.js\r\n•	Widget zur Bearbeitung eines Datensatzes.\r\n\r\n/wiki/js/wiki.errordialog.js\r\n•	Widget zur Behandlung und Anzeige von Fehlermeldungen.\r\n?\r\n/wiki/js/wiki.menubar.js\r\n•	Widget zur Bereitstellung der Menüzeile und Verknüpfung der Menüpunkte mit weiterverarbeitenden Funktionen bei einem Click Ereignis.\r\n \r\n/wiki/js/wiki.pagenumber.js\r\n•	Widget zur dynamischen Erzeugung und Darstellung der Paginate Links im Fußbereich der Webseite. Verknüpfung der Paginate Links mit einem Funktionsaufruf zur Anzeige der Datensätze, welche mit dem Link verbunden sind. (siehe 4.1.3 – Begrenzung der Datensätze pro Seite)\r\n\r\n/wiki/js/wiki.wikidetails.js\r\n•	Widget zur Darstellung der Details eines einzelnen Datensatzes. Dieser Bereich wird erst bei Aufruf der Ansicht eingeblendet.\r\n\r\n/wiki/js/wiki.wikifooter.js\r\n•	Widget zur Darstellung des HTML Footer Bereichs. Dieser Bereich wird während der Detailansicht ausgeblendet.\r\n\r\n/wiki/js/wiki.wikiheader.js\r\n•	Widget zur Darstellung des HTML Header Bereichs, welcher den Titel sowie die Spaltenüberschriften beinhaltet. Dieser Bereich wird während der Detailansicht ausgeblendet.\r\n\r\n/wiki/js/wiki.wikilist.js\r\n•	Widget zur Darstellung der Datensatzübersicht. Verknüpfung der einzelnen Datensätze mit dem Funktionsaufruf zur Darstellung der Detailansicht, der Bearbeitungsansicht und dem Löschdialog.\r\n\r\n/wiki/js/wiki.wikisearch.js\r\n•	Widget zur Eingabe eines Suchbegriffs für die Datenfelder “Kategorie“ und “Title“. Verknüpfung des “Los“ Buttons mit dem Funktionsaufruf zur Suche und Darstellung des Suchergebnisses.\r\n?\r\n/wiki/js/wiki.wikistatistic.js\r\n•	Wiki zur Darstellung der Anzahl der Beiträge innerhalb der Wissensdatenbank.\r\n\r\n/wiki/mc/\r\n/wiki/mc/index.html\r\n•	HTML Standardseite zur Darstellung des Mobile Client im Browser und auf dem Mobile Device.\r\n\r\n/wiki/mc/app.js\r\n•	Zentrale Datei zur Erfassung der Referenzierungen aller eingebundenen *.js Dateien.\r\n\r\n/wiki/mc/controller/Appcontroller.js\r\n•	Beinhaltet Funktion zum Aufruf der Detailansicht.\r\n\r\n/wiki/mc/model/Wiki.js\r\n•	Template für das Datenmodell der Detailansicht.\r\n\r\n/wiki/mc/store/Wikis.js\r\n•	Zuständig für den HTML Requests zum Aufruf des Webservice. Die Web Service Klasse “GetWikisMobCommand“ liefert die Daten für den Mobile Client.\r\n\r\n/wiki/mc/view/Main.js\r\n•	Hauptklasse zur Darstellung des Mobile Clients. Einbindung der Listenansicht aus  WikiList.js.\r\n\r\n/wiki/mc/view/WikiForm.js\r\n•	Formular zur Definition der Datenfelder (Datentyp, Name, Überschrift, Format und Zugriff) für die Detailansicht.\r\n\r\n/wiki/mc/view/WikiList.js\r\n•	Template zur Darstellung der Listenübersicht.\r\n', 'Roger Ordon', '2014-07-11', '2015-07-15'),
(36, 'HTML', 'HTML-Struktur der Website', 2, 'Die grundlegende Herangehensweise ist, daß der Webseite mehr Semantik verliehen werden soll. Das bedeutet, daß die Inhalte eine Bedeutung erhalten. Dies kann wiederum von Browsern zum Beispiel genutzt werden, um Inhalte nach Relevanz auszugeben, was bei gewöhnlichen <div>-Containern nicht möglich ist. Außerdem läßt sich dadurch das HTML-Dokument besser strukturieren und logisch aufbauen. Umgesetzt wird dies durch folgende HTML-5 Elemente:\r\n\r\nName	Bedeutung\r\n<aside>	nebensächliche Informationen in einem Dokument\r\n<article>	textuell relevante Inhalte\r\n<header>	Kopfbereich eines Dokumenteninhalts\r\n<footer>	Fußzeile eines Dokumenteninhalts\r\n<nav>	Definition von Navigationen\r\nTab. 3: Übersicht der verwendeten HTML5 Strukturelemente\r\n\r\nDarauf aufbauend läßt sich das logische Grundgerüst der Seite ableiten. Im Wesentlichen besteht der body aus drei Hauptelementen:\r\n\r\nI.	header: Kopf mit Navigation;\r\nII.	mainContent: Inhalt mit Seitenelementen\r\nIII.	footer: Fuß mit Copyright\r\n\r\nDie nachfolgende Abbildung X verdeutlicht diese Aufteilung.\r\n?\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nIm Kopf wird das Menü bzw. die Navigationsleiste über ein <nav> Element realisiert. Da die Datenbankinhalte die größte Bedeutung haben, werden sie im mainContent-Container zentral positioniert. Darunter erfolgt die Anzeige der Seitenzahlen im Container div.middleContentPages. Die Suche wird über ein Formular an der Seite in ein <aside>-Element positioniert.\r\nDie Seite folgt der Struktur: Kopf – Inhalt – Fuß. Dies läßt sich zum Beispiel auch innerhalb von <article></article> realisieren. Diese HTML5-Elemente dürfen nicht nur einmalig auf einer Seite auftauchen, sondern können sich in mehreren Bereichen verwendet werden. Der Artikel steht für eine abgeschlossene Texteinheit. Dieser kann im Kopf z.B. Meta-Informationen über einen Autor oder das Gültigkeitsdatum enthalten. Im Fuß könnten weitere Angaben stehen.\r\n\r\nDie verwendeten HTML5-Elemente lassen sich universal einsetzen und ineinander verschachteln. Der Browser kann somit den Dokumenteninhalt intelligent verarbeiten.\r\n', 'Heiko Herder', '2014-07-11', '2015-07-15'),
(37, 'Doku', 'Technische Umsetzung', 2, 'Nach den theoretischen Vorüberlegungen folgt nun die Umsetzung in Programmcode. Hilfsmittel dafür sind:\r\n\r\n•	Notepad++ 6.3.2: Editor\r\n•	jQuery $VERSION: Javascript-Bibliothek\r\n•	XAMPP 3.2.1: Webserver und mySQL-Simulation\r\n•	Chrome 36.0.1985.125 m\r\n\r\nGeplant ist, das Projekt in dem XAMPP- Installationsordner „htdocs“ zu speichern und von dort auch mit dem Github-Server zu synchronisieren. Die Daten im Backend werden in einer mySQL-Datenbank gespeichert und können über den „phpmyadmin“ separat aufgerufen werden. Alle Entwickler nutzen Windows 7 als Betriebssystem.\r\n', 'Heiko Herder', '2014-07-11', '2015-07-15'),
(38, 'WEB SERVICE', 'Klasse: RequestHandler', 2, 'Beschreibung:\r\nDie Klasse RequestHander ist die zentrale Verarbeitungsklasse, über die alle Aufrufe des Programms gesteuert bzw. kontrolliert werden. Alle Klassen des Web Service wurden in dieser Klasse referenziert. Sie erzeugt beim Aufruf ein neues Klassenobjekt der Klasse RequestHandler. Die Funktionsaufrufe der referenzierten Klassen erfolgen aus der Funktion handleRequest().\r\n\r\nAttribute:\r\n•	request:		Übergabeparameter des HTML Requests\r\n•	request_headers:	Apache Request Header\r\n•	class_name:		Neues Service Klassenobjekt\r\n•	command:		Name für neuen Service Klassenobjekts\r\n•	result:			Ergebnis des Prozessaufrufs\r\n\r\nMethoden:\r\nhandleRequest()\r\nDie Funktion handleRequest() erzeugt beim Aufruf ein neues Klassenobjekt der Klasse RequestHandler. Sie prüft, ob es sich bei der HTML Request Method um POST oder PUT handelt.\r\nHandelt es sich um die HTML POST Method, wird anhand des Parameter $request[“postMethod“] überprüft, ob die Funktionen GetWikisCommand, SearchWikisCommand oder CreateWikiCommand aufgerufen werden.\r\nHandelt es sich umd die HTML PUT Methode, wird der Parameter $request um die  Werte aus dem „php://input“ Stream erweitert.\r\n?\r\nIn beiden Fällen überprüft die Funktion, ob die Attribute „category“, „title“ oder „notes“ ausgefüllt wurden. Andernfalls wird der Prozessaufruf mit dem HTML Fehlercode 400 beendet.\r\n\r\nIm Anschluss erzeugt die Funktion handleReqeust() ein neues Klassenobjekt mit den Namen der Klasse, die über den Parameter $command mitgeliefert wurde. Anschließend wird die Funktion execute() des zuvor erzeugten Klassenobjekts aufgerufen.\r\n', 'Roger Ordon', '2014-07-11', '2015-07-15'),
(42, 'WEB SERVICE', 'Klasse: CreateWikiCommand', 1, 'Beschreibung:\r\nDie Klasse SearchWikiCommand dient zur Anlage eines neuen Datensatzes. Der neue Datensatz wird über den Parameter $request übernommen und in dem Array $wiki zwischengespeichert. Die Funktion execute() erzeugt eine neue Instanz der Klasse wikiService. Sie ruft die Funktion createWiki() in dem Klassenobjekt wikiService auf, welche den Datensatz in der Tabelle wiki der mySQL-Datenbank „wiki“ anlegt. Der Autor des neuen Datensatzes wird aus der Systemvariablen $_SERVER["PHP_AUTH_USER"] ausgelesen. \r\n\r\nAttribute:\r\n•	result:			Parameterübergabe\r\n•	wiki:			SQL Abfrageergebnis\r\n•	wiki_service:		Klassenobjekt wikiService\r\n\r\nMethoden:\r\nexecute($request)\r\nDie Funktion execute() erzeugt eine neue Instanz der Klasse wikiService. Sie ruft die Funktion createWiki() in dem Klassenobjekt wikiService auf, welche den neuen Datensetz in der Tabelle wiki der mySQL-Datenbank „wiki“ anlegt.\r\n', 'Roger Ordon', '2014-07-13', '2015-07-13'),
(46, 'WEB SERVICE', 'Klasse: CreateWikiResult', 1, 'Beschreibung:\r\nDie Klasse CreateWikiResult dient ausschließlich zur Bereitstellung der unten aufgeführten Attribute, welche von der Klasse RequestHander für die Fehlerbehandlung verwendet werden.\r\n\r\nAttribute:\r\n•	id:			Datensatz ID\r\n•	status_code:		HTML Status Code\r\n•	validation_message:	Fehlermeldung\r\n\r\nMethoden:\r\nkeine\r\n', 'Roger Ordon', '2014-07-13', '2015-07-13'),
(50, 'WEB SERVICE', 'Klasse: GetWikiCommand', 1, 'Beschreibung:\r\nDie Klasse DeleteWikiCommand dient der Löschung eines einzelnen Datensatzes. Die Funktion execute() erzeugt eine neue Instanz der Klasse wikiService. Sie ruft die Funktion deleteWiki() in dem Klassenobjekt wikiService auf, welche den ausgewählten Datensatz löscht.\r\n\r\nAttribute:\r\n•	id:			Datensatz ID\r\n•	wikis:			SQL Abfrageergebnis\r\n•	wiki_service:		Klassenobjekt wikiService\r\n\r\nMethoden:\r\nexecute($request)\r\nDie Funktion execute() erzeugt eine neue Instanz der Klasse wikiService. Sie ruft die Funktion deleteWiki() in dem Klassenobjekt wikiService auf, welche den ausgewählten Datensatz löscht. Der Datensatz wird anhand der im Parameter $request[id] mitgelieferten Datensatz ID indentifiziert. Als Rückgabewert liefert die Funktion das Ergebnis DELETED. Konnte der zu löschende Datensatz nicht gefunden werden, wird der HTML Fehlercode 404 zurückgegeben.\r\n', 'Roger Ordon', '2014-07-13', '2015-07-13'),
(53, 'WEB SERVICE', 'Klasse: GetWikisCommand', 1, 'Beschreibung:\r\nDie Klasse GetWikisCommand dient der Ausgabe einer Liste von 8 Datensätzen. Gleichzeitig dient Sie der Ermittlung der Anzahl aller Datensätze sowie der Anzahl der Seiten, auf denen alle Datensätze angezeigt werden können. Die Anzahl der Datensätze wird in der SQL Query durch die LIMIT Anweisung begrenzt. Die Parameter LIMIT [Startpunkt],[Anzahl der Datensätze] werden der Funktion execute() als Parameter übergeben.\r\n\r\nAttribute:\r\n•	id:			Datensatz ID\r\n•	wikis:			SQL Abfrageergebnis\r\n•	wiki_service:		Klassenobjekt wikiService\r\n\r\nMethoden:\r\nexecute($request)\r\nDie Funktion execute() erzeugt eine neue Instanz der Klasse wikiService. Sie übernimmt den Startpunkt sowie die Anzahl der Datensätze für die LIMIT Anweisung der, in der wikiService ausgeführten SQL Query, aus den Parametern $request[“pageFrom“] und $request[“pageResults“]. Standardmäßig wurde die Anzahl der Datensätze pro Seite auf 8 reduziert. Die Funktion prüft, durch welche HTML Methode der Aufruf durchgeführt wurde. \r\nHandelt es sich um einen HTML GET Request, wird die Funktion countWikis() im wikiService aufgerufen, welche die Anzahl aller Datensätze ermittelt. Zudem wird die Anzahl der Seiten berechnet, auf denen alle Datensätze angezeigt werden können. Das Ergebnis wird in dem Array pagedata[“pagenum“], die Anzahl der Seiten und $pagedata[“count“], die Summe der Datensätze, zwischengespeichert.\r\nHandelt es sich um einen HTML POST Request, wird die Funktion readWikis() im wikiService aufgerufen, welche die ausgewählten Datensätze aus der Tabelle wiki wiedergibt und in dem Array $wikis zwischenspeichert. Im Anschluss wird jeder Datensatz um die Attribute url, welche den direkten Aufruf des einzelnen Datensatzes ermöglicht, und der Gültigkeitsdauer für den Artikel erweitert, welche zuvor berechnet wurde.\r\n', 'Roger Ordon', '2014-07-13', '2015-07-13'),
(54, 'WEB SERVICE', 'Klasse: GetWikisMobCommand', 1, 'Beschreibung:\r\nDie Klasse GetWikisMobCommand dient der Ausgabe aller Datensätzen. Die Funktion execute() erzeugt eine neue Instanz der Klasse wikiService. Sie ruft die Funktion readWikisMob() in dem Klassenobjekt wikiService auf, welche alle Datensätze der Tabelle wiki ausgibt.\r\n\r\nAttribute:\r\n•	wikis:			SQL Abfrageergebnis\r\n•	wiki_service:		Klassenobjekt wikiService\r\n\r\nMethoden:\r\nexecute($request)\r\nDie Funktion execute() erzeugt eine neue Instanz der Klasse wikiService. Sie prüft, ob es sich bei dem Funktionsaufruf um einen HTML GET Request handelt und ruft die Funktion readWikisMob() in dem Klassenobjekt wikiService auf, welche alle Datensätze der Tabelle wiki ausgibt. Im Anschluss wird jeder Datensatz um die Attribute url, welche den direkten Aufruf des einzelnen Datensatzes ermöglicht.\r\n', 'Roger Ordon', '2014-07-13', '2015-07-13'),
(55, 'WEB SERVICE', 'Klasse: SearchWikiCommand', 1, 'Beschreibung: \r\nDie Klasse SearchWikiCommand dient zur Suche von Datensätzen anhand eines Suchbegriffs. Die Funktion execute() erzeugt eine neue Instanz der Klasse wikiService. Sie ruft die Funktion searchWiki() in dem Klassenobjekt wikiService auf, welche nach Datensätzen sucht, deren „Kategorie“ oder „Titel“ mit dem Suchbegriff übereinstimmen und speichert diese in dem Attribut „wikis“ zwischen. Anschließend wird für jeden Datensatz die Gültigkeitsdauer anhand des Ablaufdatums berechnet. \r\n\r\n[Gültigkeitsdauer in Tagen] = [Ablaufdatum] – [aktuelles Datum] \r\n?\r\nAttribute:\r\n•	wikis:			SQL Abfrageergebnis\r\n•	wiki_service:		Klassenobjekt wikiService\r\n\r\nMethoden:\r\nexecute($request)\r\nDie Funktion execute() erzeugt eine neue Instanz der Klasse wikiService. Sie ruft die Funktion searchWiki() in dem Klassenobjekt wikiService auf und speichert das Ergebnis in der Varialben $wikis. Im Anschluss wird jeder Datensatz um die Attribute url, welche den direkten Aufruf des einzelnen Datensatzes ermöglicht, und der Gültigkeitsdauer für den Artikel erweitert, welche zuvor berechnet wurde.\r\n', 'Heiko Herder', '2014-07-13', '2015-07-13'),
(56, 'WEB SERVICE', 'Klasse: UpdateWikiCommand', 1, 'Beschreibung:\r\nDie Klasse UpdateWikiCommand dient zur Aktualisierung eines Datensatzes im Web Service. Die Funktion execute() erzeugt eine neue Instanz der Klassen Wiki und wikiService. Sie speichert den editierten Datensatz in dem Klassenobjekt Wiki zwischen. Anschließend ruft sie die Funktion updateWiki() in dem Klassenobjekt wikiService auf, welcher den Datensatz in der Datenbank aktualisiert, sofern die Versionsnummer des aktuellen Datensatzes mit der Versionsnummer des Session Headers übereinstimmt.\r\n\r\nAttribute:\r\n•	wiki:			Klassenobjekt wiki\r\n•	wiki_service:		Klassenobjekt wikiService\r\n\r\nMethoden:\r\nexecute($request, $request_headers)	\r\nErzeugt die Klassenobjekte wiki und wikiService. Übernimmt und prüft den editieren Datensatz aus dem Parameter $request. Überprüft die Versionsnummer des aktuellen Datensatzes mit der Versionsnummer aus dem Parameter $request_headers.\r\n', 'Roger Ordon', '2014-07-13', '2015-07-13'),
(57, 'WEB SERVICE', 'Klasse: WikiService', 1, 'Beschreibung:\r\nDie Klasse wikiService dient als zentrale Verarbeitungsklasse, welche alle wesentlichen Funktionen zur Verarbeitung des Web Service beinhaltet.\r\nDie WikiCommand Klassen nutzen diese Klasse, indem Sie ein Klassenobjekt der Klasse wikiService erzeugen und die gewünschte Funktion innerhalb der Klasse aufrufen. Die einzelnen Funktionen der Klasse sind unten beschrieben.\r\n?\r\nAttribute:\r\n•	ERROR:			Programmfehler innerhalb des Service\r\n•	NOT_FOUND:		Datensatz nicht gefunden\r\n•	INVALID_INPUT:		Fehlerhafte Eingabe\r\n•	OK:				SQL Abfrage OK, jedoch kein Treffer\r\n•	VERSION_OUTDATED:	Datensatzversion abgelaufen\r\n•	link:				SQL Verbindung\r\n•	sql_statement:			SQL Query\r\n•	result_set:			SQL Abfrageergebnis\r\n•	successeded:			Return Ergebnis bei Erfolg\r\n•	affected_rows:		Anzahl der betroffenen Datensätze\r\n•	wiki:				Klassenobjekt wiki\r\n•	result:				Rückgabeergebnis\r\n•	id:				Datensatz ID\r\n•	row:				Zeilenzahl des Datensatzes\r\n•	count:				Anzahl der Datensätze\r\n\r\nMethoden:\r\nreadWiki($id): Rückgabe eines Datensatzes in Form eines Arrays;\r\nDie Funktion baut eine Verbindung zur mySQL-Datenbank „wiki“ auf und sucht anhand der im Parameter mitgelieferten ID nach dem entsprechenden Datensatz. Sofern kein Datensatz gefunden werden kann, gibt die Funktion den HTML Fehlercode 404 – NOT FOUND zurück.\r\n\r\nreadWikis(): Rückgabe aller Datensätze in Form eines Arrays;\r\nDie Funktion baut eine Verbindung zur mySQL-Datenbank „wiki“ auf und gibt alle Datensätze der Tabelle wiki wieder.\r\n\r\nreadWikisMob(): Rückgabe aller Datensätze in Form eines Arrays für den Mobile Client;\r\nDie Funktion baut eine Verbindung zur mySQL-Datenbank „wiki“ auf und gibt alle Datensätze der Tabelle wiki wieder. \r\n?\r\nsearchWiki(): Suche von Datensätzen anhand eines Suchbegriffs;\r\nDie Funktion baut eine Verbindung zur mySQL-Datenbank „wiki“ auf und gibt alle Datensätze der Tabelle wiki wieder, deren Kategorie bzw. Titel den mitgelieferten Suchbegriff beinhalten.\r\n\r\ncreateWiki(): Speicherung eines neuen Datensatzes in der Datenbank;\r\nDie Funktion baut eine Verbindung zur mySQL-Datenbank „wiki“ auf und legt einen neuen Datensatz in der Tabelle wiki an. Sofern die Pflichtfelder „category“, „title“ oder „notes“ ohne Eingabewerte an die Funktion übergeben wurden, wird die Fehlermeldung „INVALID_INPUT“ zurückgegeben. Nach erfolgreicher Speicherung des neuen Datensatzes wird der Status Code „OK“ zurückgegeben.\r\n\r\nupdateWiki(): Änderung eines bestehenden Datensatzes;\r\nDie Funktion baut eine Verbindung zur mySQL-Datenbank „wiki“ auf und überschreibt die Werte des Datensatzes, dessen ID als Parameter  mitgeliefert wurden. Die Versionsnummer des Datensatzes wird um 1 erhöht. Sofern die Versionsnummer des Datensatzes seit dem lesenden Aufruf verändert wurde, gibt die Funktion den HTML Fehlercode 412 zurück.\r\nSofern kein Datensatz gefunden werden kann, gibt die Funktion den HTML Fehlercode 404 – NOT FOUND zurück.\r\n\r\ndeleteWiki(): Löschen eines bestehenden Datensatzes;\r\nDie Funktion baut eine Verbindung zur mySQL-Datenbank „wiki“ auf und löscht den Datensatz, dessen ID als Parameter  mitgeliefert wurden. Sofern kein Datensatz gefunden werden kann, gibt die Funktion den HTML Fehlercode 404 – NOT FOUND zurück.\r\n', 'Roger Ordon', '2014-07-13', '2015-07-13');

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
